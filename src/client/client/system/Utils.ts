import { DocumentData, QueryDocumentSnapshot } from "firebase/firestore";
import { ProfileModel } from "../user/Profile";
import { UserModel } from './../user/User'
import { DiscountModel, ProductModel } from "./Products";

export class Utils
{
    public static GetRandomInt(max:number) {
      return Math.floor(Math.random() * max);
    }

    private static FourLengthRandomString(): string {
      return Math.floor((1 + Math.random()) * 0x10000)
        .toString(16)
        .substring(1);
    }

    public static GenerateRandomID(): string {
      let first = this.FourLengthRandomString();
      let second = this.FourLengthRandomString();

      return first + "-" + second;
    }

    public static ComputeAge(birthdate: string) : number
    {
      if (!birthdate)
        return -1;

      var today = new Date();
      var birthDate = new Date(birthdate);
      var age_now = today.getFullYear() - birthDate.getFullYear();
      var m = today.getMonth() - birthDate.getMonth();
      if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {
        age_now--;
      }

      return age_now;
    }

    public static ParseDataToUserModel(data: DocumentData): UserModel
    {
      let userModel = new UserModel(
        {
          uuid: data.uuid,
          displayName: data.displayName,
          email: data.email,
          photoURL: data.photoURL,
          profileReference: data.profileReference,
          birthday: data.birthday,
          age: Utils.ComputeAge(data.birthday),
          gender: data.gender,
          weight: data.weight,
          height: data.height,
          maritalStatus: data.maritalStatus,
          bodyType: data.bodyType,
          ethnicity: data.ethnicity,
          hairColor: data.hairColor,
          eyeColor: data.eyeColor,
          sexualOrientation: data.sexualOrientation,
          country: data.country,
          language: data.language,
          aboutMe: data.aboutMe,
          lookingFor: data.lookingFor,
          tags: data.tags,
          userType: data.userType ? data.userType : 'user',
          credits: data.credits ? data.credits : 0,
          siteOfOrigin: data.siteOfOrigin? data.siteOfOrigin : '',
          likedProfiles: data.likedProfiles,
          profilesLikedYou: data.profilesLikedYou,
          verificationRewardsReceived: data.verificationRewardsReceived ? data.verificationRewardsReceived : false,
          hasLoggedInBefore: data.hasLoggedInBefore ? data.hasLoggedInBefore : false,
          geolocation: data.geolocation ? new Map([
            ["countryCode", data.geolocation.countryCode],
            ["countryName", data.geolocation.countryName],
            ["city", data.geolocation.city],
            ["state", data.geolocation.state]
          ]) : null as any,
          isPaidUser: data.isPaidUser ? data.isPaidUser : false,
          isTestAccount: data.isTestAccount ? data.isTestAccount : false,
          isAutoGenerated: data.isAutoGenerated ? data.isAutoGenerated : false,
          isProfileCompleted: data.isProfileCompleted?data.isProfileCompleted:false,
          availedDiscounts: data.availedDiscounts ? data.availedDiscounts : [],
        });

        return userModel;
    }

    public static ParseDataToProfileModel(doc: QueryDocumentSnapshot<DocumentData>) : ProfileModel
    {
      let data = doc.data();
      let profileModel = new ProfileModel(
        {
          id: doc.id,
          createdAt: data.createdAt,
          displayName: data.displayName,
          photoURL: data.photoURL,
          controllerUuid: data.controllerUuid,
          birthday: data.birthday,
          age: Utils.ComputeAge(data.birthday),
          gender: data.gender,
          weight: data.weight,
          height: data.height,
          maritalStatus: data.maritalStatus,
          bodyType: data.bodyType,
          ethnicity: data.ethnicity,
          hairColor: data.hairColor,
          eyeColor: data.eyeColor,
          sexualOrientation: data.sexualOrientation,
          city: data.city,
          country: data.country,
          language: data.language,
          aboutMe: data.aboutMe,
          lookingFor: data.lookingFor,
          tags: data.tags,
          status: data.status,
          sites: data.sites
        }
      );
      return profileModel
    }

  public static ParseDataToProductModel(doc: QueryDocumentSnapshot<DocumentData>): ProductModel 
  {
    let data = doc.data();
    // console.log(data)
    let productModel = new ProductModel(
      {
        id: doc.id,
        productName: data.product_name,
        priceId: data.price_id,
        value: data.value,
        priceValue: data.price_value,
        discountRef: data.discount_ref,
        testPriceId: data.test_price_id
      }
    );
    return productModel;
  }

  public static ParseDataToDiscountModel(data: DocumentData): DiscountModel
  {
    let discountModel = new DiscountModel(
      {
        priceId: data.price_id,
        descripttion: data.description,
        name: data.name,
        value: data.value,
        testPriceId : data.test_price_id,
        priceValue: data.price_value
      }
    );

    return discountModel;
  }

  public static RefreshPage()
  {
    window.location.reload();
  }
}